import requests
from pathlib import Path
import json
import os
import random
from openai import OpenAI
from cover_image import create_cover_image
from slide_images import create_slide_images

client = OpenAI()

occupations = [
    "Accountant",
    "Actor",
    "Acupuncturist",
    "Aerospace Engineer",
    "Agricultural Scientist",
    "Air Traffic Controller",
    "Aircraft Mechanic",
    "Airline Pilot",
    "Allergist",
    "Ambassador",
    "Amusement Park Manager",
    "Animal Behaviorist",
    "Animal Trainer",
    "Animator",
    "Antique Dealer",
    "Anthropologist",
    "Archaeologist",
    "Architect",
    "Archivist",
    "Armorer",
    "Art Appraiser",
    "Art Conservator",
    "Art Curator",
    "Art Director",
    "Art Handler",
    "Art Therapist",
    "Artificial Intelligence Engineer",
    "Artist",
    "Astronaut",
    "Astronomer",
    "Athletic Trainer",
    "Auctioneer",
    "Audio Engineer",
    "Auditor",
    "Author",
    "Auto Mechanic",
    "Automotive Designer",
    "Ayurvedic Doctor",
    "Baker",
    "Ballet Dancer",
    "Bank Manager",
    "Bank Teller",
    "Banker",
    "Bar Manager",
    "Barber",
    "Barista",
    "Barrister",
    "Bartender",
    "Basket Weaver",
    "Beekeeper",
    "Bicycle Courier",
    "Billiards Player",
    "Biochemist",
    "Biologist",
    "Biostatistician",
    "Blacksmith",
    "Blogger",
    "Boat Builder",
    "Boat Captain",
    "Book Editor",
    "Bookbinder",
    "Botanist",
    "Bouncer",
    "Brewmaster",
    "Bricklayer",
    "Bridge Inspector",
    "Broadcast Engineer",
    "Broadcaster",
    "Buddhist Monk",
    "Building Inspector",
    "Bus Driver",
    "Business Analyst",
    "Butcher",
    "Call Center Agent",
    "Calligrapher",
    "Camera Operator",
    "Campaign Manager",
    "Candle Maker",
    "Cannabis Grower",
    "Car Detailer",
    "Car Salesperson",
    "Car Wash Attendant",
    "Caravan Park Manager",
    "Cardiologist",
    "Caregiver",
    "Carpenter",
    "Cartographer",
    "Casino Dealer",
    "Casino Host",
    "Casting Director",
    "Caterer",
    "Ceramicist",
    "Chambermaid",
    "Chauffeur",
    "Chef",
    "Chemical Engineer",
    "Chemist",
    "Chess Grandmaster",
    "Child Psychologist",
    "Childcare Worker",
    "Chimney Sweep",
    "Chocolatier",
    "Choreographer",
    "Cinematographer",
    "Circus Performer",
    "Civil Engineer",
    "Classical Musician",
    "Cleaner",
    "Clergy",
    "Climatologist",
    "Clockmaker",
    "Cloud Solutions Architect",
    "Cobbler",
    "Coffee Roaster",
    "Commercial Diver",
    "Commercial Fisherman",
    "Communication Specialist",
    "Community Organizer",
    "Composer",
    "Computer Programmer",
    "Concierge",
    "Conductor",
    "Conservationist",
    "Construction Manager",
    "Construction Worker",
    "Content Creator",
    "Contract Lawyer",
    "Copy Editor",
    "Copywriter",
    "Corporate Trainer",
    "Costume Designer",
    "Counselor",
    "Court Interpreter",
    "Court Reporter",
    "Crane Operator",
    "Creative Director",
    "Credit Analyst",
    "Crime Scene Investigator",
    "Critic",
    "Cruise Director",
    "Cryptographer",
    "Curator",
    "Customs Officer",
    "Dairy Farmer",
    "Data Analyst",
    "Data Entry Clerk",
    "Data Scientist",
    "Debt Collector",
    "Deckhand",
    "Delivery Driver",
    "Demographer",
    "Dental Assistant",
    "Dental Hygienist",
    "Dentist",
    "Dermatologist",
    "Designer",
    "Detective",
    "Development Aid Worker",
    "Dietitian",
    "Digital Marketer",
    "Diplomat",
    "Disc Jockey",
    "Dishwasher",
    "Dispatcher",
    "Diver (Pearl, Sponge, Commercial)",
    "Dog Groomer",
    "Dog Trainer",
    "Dog Walker",
    "Doorman",
    "Drama Teacher",
    "Drone Operator",
    "Dry Cleaner",
    "Economist",
    "Editor",
    "Education Consultant",
    "Electrician",
    "Elevator Installer",
    "Embalmer",
    "Emergency Medical Technician",
    "Embroiderer",
    "Endocrinologist",
    "Engineer",
    "English Teacher (ESL)",
    "Environmental Consultant",
    "Epidemiologist",
    "Event Planner",
    "Exterminator",
    "Factory Worker",
    "Family Therapist",
    "Farmer",
    "Fashion Designer",
    "Fencing Instructor",
    "Film Critic",
    "Film Director",
    "Film Editor",
    "Finance Manager",
    "Financial Advisor",
    "Financial Planner",
    "Fine Artist",
    "Firefighter",
    "Fisherman",
    "Flight Attendant",
    "Florist",
    "Food Critic",
    "Food Inspector",
    "Food Scientist",
    "Forensic Scientist",
    "Forest Ranger",
    "Fortune Teller",
    "Franchise Owner",
    "Freight Forwarder",
    "French Teacher",
    "Funeral Director",
    "Furniture Maker",
    "Game Developer",
    "Game Warden",
    "Gardener",
    "Geographer",
    "Geologist",
    "Glassblower",
    "Goldsmith",
    "Golf Pro",
    "Graphic Designer",
    "Greenhouse Manager",
    "Grocer",
    "Groundskeeper",
    "Guitar Maker",
    "Gymnastics Coach",
    "Hair Stylist",
    "Hairdresser",
    "Handball Coach",
    "Handyman",
    "Harbor Master",
    "Hardware Engineer",
    "Hearing Aid Specialist",
    "Herbalist",
    "Historian",
    "Home Appliance Repairer",
    "Home Health Aide",
    "Homeopath",
    "Horse Breeder",
    "Horse Trainer",
    "Hospital Administrator",
    "Host/Hostess",
    "Hotel Concierge",
    "Hotel Manager",
    "House Painter",
    "Housekeeper",
    "Human Resources Manager",
    "Hydrologist",
    "Hypnotherapist",
    "Ice Cream Vendor",
    "Illustrator",
    "Immigration Officer",
    "Import/Export Agent",
    "Industrial Designer",
    "Industrial Engineer",
    "Information Security Analyst",
    "Information Technology Consultant",
    "Insurance Agent",
    "Insurance Broker",
    "Interpreter",
    "Investment Banker",
    "Ironworker",
    "IT Consultant",
    "Janitor",
    "Jeweler",
    "Journalist",
    "Judge",
    "Karate Instructor",
    "Kinesiologist",
    "Kindergarten Teacher",
    "Laboratory Technician",
    "Land Surveyor",
    "Landscape Architect",
    "Language Tutor",
    "Launderer",
    "Law Clerk",
    "Lawyer",
    "Leatherworker",
    "Librarian",
    "Library Assistant",
    "Lifeguard",
    "Lighting Designer",
    "Linguist",
    "Locksmith",
    "Logistician",
    "Machine Learning Engineer",
    "Machinist",
    "Magician",
    "Mail Carrier",
    "Makeup Artist",
    "Management Consultant",
    "Manicurist",
    "Marine Biologist",
    "Market Research Analyst",
    "Marketer",
    "Mason",
    "Massage Therapist",
    "Mathematician",
    "Mechanical Engineer",
    "Mechanic",
    "Medical Illustrator",
    "Medical Laboratory Scientist",
    "Medical Transcriptionist",
    "Meteorologist",
    "Microbiologist",
    "Midwife",
    "Miner",
    "Mining Engineer",
    "Mobile App Developer",
    "Model",
    "Molecular Biologist",
    "Monk",
    "Motorcycle Courier",
    "Mountaineer Guide",
    "Movie Producer",
    "Muralist",
    "Museum Curator",
    "Music Producer",
    "Music Teacher",
    "Musician",
    "Nail Technician",
    "Nanny",
    "Naval Architect",
    "Navigator",
    "Network Administrator",
    "Neurologist",
    "News Anchor",
    "Nightclub Promoter",
    "Nuclear Engineer",
    "Nurse",
    "Nutritionist",
    "Occupational Therapist",
    "Oceanographer",
    "Office Manager",
    "Oil Rig Worker",
    "Oncologist",
    "Operations Manager",
    "Ophthalmologist",
    "Optician",
    "Optometrist",
    "Orchestra Conductor",
    "Orthodontist",
    "Orthopedic Surgeon",
    "Outdoor Adventure Guide",
    "Paleontologist",
    "Paralegal",
    "Paramedic",
    "Park Ranger",
    "Parole Officer",
    "Pastor",
    "Patent Attorney",
    "Pathologist",
    "Pediatrician",
    "Personal Assistant",
    "Personal Chef",
    "Personal Trainer",
    "Pest Control Technician",
    "Pet Groomer",
    "Pet Sitter",
    "Pharmacist",
    "Pharmacy Technician",
    "Philanthropist",
    "Philosopher",
    "Photo Editor",
    "Photojournalist",
    "Photographer",
    "Physical Therapist",
    "Physician",
    "Physicist",
    "Physiologist",
    "Piano Tuner",
    "Pilates Instructor",
    "Pilot",
    "Pipefitter",
    "Pizza Chef",
    "Plasterer",
    "Plumber",
    "Poet",
    "Police Detective",
    "Police Officer",
    "Policy Analyst",
    "Political Campaigner",
    "Political Scientist",
    "Pollster",
    "Porter",
    "Postal Worker",
    "Potter",
    "Power Plant Operator",
    "Precision Instrument Maker",
    "Preschool Teacher",
    "Priest",
    "Printmaker",
    "Private Detective",
    "Private Tutor",
    "Producer",
    "Product Designer",
    "Product Manager",
    "Professor",
    "Program Manager",
    "Project Manager",
    "Property Manager",
    "Prosthetist",
    "Psychiatrist",
    "Psychologist",
    "Public Defender",
    "Public Health Nurse",
    "Public Relations Specialist",
    "Publisher",
    "Puppeteer",
    "Quality Assurance Tester",
    "Quarry Worker",
    "Rabbi",
    "Radiologist",
    "Ranger",
    "Real Estate Agent",
    "Receptionist",
    "Recreation Worker",
    "Recycling Coordinator",
    "Referee",
    "Registrar",
    "Reiki Practitioner",
    "Relationship Coach",
    "Religious Educator",
    "Reporter",
    "Research Scientist",
    "Restaurateur",
    "Restaurant Critic",
    "Restaurant Manager",
    "Retail Buyer",
    "Retail Manager",
    "Roofer",
    "Sailmaker",
    "Sales Manager",
    "Sales Representative",
    "Sanitation Worker",
    "Satellite Engineer",
    "Sculptor",
    "Seamstress",
    "Search Engine Optimizer",
    "Security Analyst",
    "Security Guard",
    "Set Designer",
    "Share Trader",
    "Shepherd",
    "Shipping Coordinator",
    "Shoe Designer",
    "Shoe Repairer",
    "Shopkeeper",
    "Sign Language Interpreter",
    "Silversmith",
    "Singer",
    "Skincare Specialist",
    "Ski Instructor",
    "Social Media Manager",
    "Social Worker",
    "Software Developer",
    "Soil Scientist",
    "Solar Energy Technician",
    "Sommelier",
    "Sound Engineer",
    "Speech Pathologist",
    "Sports Agent",
    "Sports Coach",
    "Sports Journalist",
    "Sports Psychologist",
    "Statistician",
    "Stockbroker",
    "Stonemason",
    "Storyteller",
    "Street Vendor",
    "Structural Engineer",
    "Student Advisor",
    "Subway Operator",
    "Surgeon",
    "Surveyor",
    "Sushi Chef",
    "Swim Instructor",
    "Systems Analyst",
    "Tailor",
    "Talent Agent",
    "Tattoo Artist",
    "Tax Advisor",
    "Taxi Driver",
    "Teacher",
    "Technical Writer",
    "Telecommunications Engineer",
    "Telemarketer",
    "Television Producer",
    "Textile Designer",
    "Theater Director",
    "Therapist",
    "Thermal Engineer",
    "Ticket Inspector",
    "Tour Guide",
    "Town Planner",
    "Toy Designer",
    "Track Coach",
    "Trade Union Official",
    "Traffic Controller",
    "Train Conductor",
    "Translator",
    "Travel Agent",
    "Tree Surgeon",
    "Truck Driver",
    "Umpire",
    "Underwriter",
    "Urban Farmer",
    "Urban Planner",
    "UX Designer",
    "Valet",
    "Venture Capitalist",
    "Veterinarian",
    "Video Editor",
    "Violin Maker",
    "Virtual Assistant",
    "Voice Actor",
    "Volunteer Coordinator",
    "Waiter",
    "Wardrobe Stylist",
    "Warehouse Manager",
    "Watchmaker",
    "Water Treatment Specialist",
    "Web Designer",
    "Web Developer",
    "Welder",
    "Wildlife Biologist",
    "Winemaker",
    "Writer",
    "Yoga Instructor",
    "Zoologist",
]

cities = [
    "New York City, USA (New York)",
    "Los Angeles, USA (California)",
    "Chicago, USA (Illinois)",
    "Houston, USA (Texas)",
    "Miami, USA (Florida)",
    "San Francisco, USA (California)",
    "Boston, USA (Massachusetts)",
    "Washington, D.C., USA (District of Columbia)",
    "Atlanta, USA (Georgia)",
    "Dallas, USA (Texas)",
    "Seattle, USA (Washington)",
    "Denver, USA (Colorado)",
    "Philadelphia, USA (Pennsylvania)",
    "Phoenix, USA (Arizona)",
    "Las Vegas, USA (Nevada)",
    "Toronto, Canada (Ontario)",
    "Vancouver, Canada (British Columbia)",
    "Montreal, Canada (Quebec)",
    "Calgary, Canada (Alberta)",
    "Ottawa, Canada (Ontario)",
    "Mexico City, Mexico (CDMX)",
    "Monterrey, Mexico (Nuevo León)",
    "Guadalajara, Mexico (Jalisco)",
    "Buenos Aires, Argentina (Buenos Aires)",
    "São Paulo, Brazil (São Paulo)",
    "Rio de Janeiro, Brazil (Rio de Janeiro)",
    "Brasília, Brazil (Distrito Federal)",
    "Santiago, Chile (Santiago Metropolitan)",
    "Lima, Peru (Lima Province)",
    "Bogotá, Colombia (Distrito Capital)",
    "Medellín, Colombia (Antioquia)",
    "Caracas, Venezuela (Capital District)",
    "Quito, Ecuador (Pichincha)",
    "La Paz, Bolivia (La Paz)",
    "Asunción, Paraguay (Asunción)",
    "Montevideo, Uruguay (Montevideo)",
    "London, UK (England)",
    "Manchester, UK (England)",
    "Birmingham, UK (England)",
    "Edinburgh, UK (Scotland)",
    "Glasgow, UK (Scotland)",
    "Dublin, Ireland (Leinster)",
    "Paris, France (Île-de-France)",
    "Marseille, France (Provence-Alpes-Côte d'Azur)",
    "Lyon, France (Auvergne-Rhône-Alpes)",
    "Berlin, Germany (Berlin)",
    "Munich, Germany (Bavaria)",
    "Frankfurt, Germany (Hesse)",
    "Hamburg, Germany (Hamburg)",
    "Rome, Italy (Lazio)",
    "Milan, Italy (Lombardy)",
    "Naples, Italy (Campania)",
    "Venice, Italy (Veneto)",
    "Madrid, Spain (Community of Madrid)",
    "Barcelona, Spain (Catalonia)",
    "Seville, Spain (Andalusia)",
    "Valencia, Spain (Valencian Community)",
    "Lisbon, Portugal (Lisbon)",
    "Porto, Portugal (Porto)",
    "Brussels, Belgium (Brussels-Capital Region)",
    "Antwerp, Belgium (Flanders)",
    "Amsterdam, Netherlands (North Holland)",
    "Rotterdam, Netherlands (South Holland)",
    "The Hague, Netherlands (South Holland)",
    "Zurich, Switzerland (Zurich)",
    "Geneva, Switzerland (Geneva)",
    "Vienna, Austria (Vienna)",
    "Salzburg, Austria (Salzburg)",
    "Prague, Czech Republic (Prague)",
    "Warsaw, Poland (Mazovia)",
    "Kraków, Poland (Lesser Poland)",
    "Budapest, Hungary (Central Hungary)",
    "Athens, Greece (Attica)",
    "Thessaloniki, Greece (Central Macedonia)",
    "Istanbul, Turkey (Marmara)",
    "Ankara, Turkey (Central Anatolia)",
    "Moscow, Russia (Moscow)",
    "Saint Petersburg, Russia (Saint Petersburg)",
    "Helsinki, Finland (Uusimaa)",
    "Stockholm, Sweden (Stockholm County)",
    "Gothenburg, Sweden (Västra Götaland)",
    "Oslo, Norway (Oslo)",
    "Copenhagen, Denmark (Capital Region)",
    "Reykjavik, Iceland (Capital Region)",
    "Tallinn, Estonia (Harju County)",
    "Riga, Latvia (Riga)",
    "Vilnius, Lithuania (Vilnius)",
    "Kyiv, Ukraine (Kyiv City)",
    "Odesa, Ukraine (Odesa)",
    "Bucharest, Romania (Bucharest)",
    "Sofia, Bulgaria (Sofia City)",
    "Belgrade, Serbia (Belgrade)",
    "Zagreb, Croatia (Zagreb)",
    "Ljubljana, Slovenia (Ljubljana)",
    "Sarajevo, Bosnia and Herzegovina (Sarajevo)",
    "Skopje, North Macedonia (Skopje)",
    "Podgorica, Montenegro (Podgorica)",
    "Tirana, Albania (Tirana)",
    "Tbilisi, Georgia (Tbilisi)",
    "Yerevan, Armenia (Yerevan)",
    "Baku, Azerbaijan (Baku)",
    "Jerusalem, Israel (Jerusalem)",
    "Tel Aviv, Israel (Tel Aviv District)",
    "Dubai, UAE (Dubai)",
    "Abu Dhabi, UAE (Abu Dhabi)",
    "Doha, Qatar (Doha)",
    "Riyadh, Saudi Arabia (Riyadh)",
    "Jeddah, Saudi Arabia (Mecca)",
    "Amman, Jordan (Amman)",
    "Beirut, Lebanon (Beirut)",
    "Cairo, Egypt (Cairo)",
    "Alexandria, Egypt (Alexandria)",
    "Casablanca, Morocco (Casablanca-Settat)",
    "Marrakech, Morocco (Marrakesh-Safi)",
    "Tunis, Tunisia (Tunis)",
    "Algiers, Algeria (Algiers)",
    "Tripoli, Libya (Tripoli)",
    "Cape Town, South Africa (Western Cape)",
    "Johannesburg, South Africa (Gauteng)",
    "Durban, South Africa (KwaZulu-Natal)",
    "Lagos, Nigeria (Lagos)",
    "Abuja, Nigeria (Federal Capital Territory)",
    "Nairobi, Kenya (Nairobi)",
    "Mombasa, Kenya (Mombasa)",
    "Addis Ababa, Ethiopia (Addis Ababa)",
    "Accra, Ghana (Greater Accra)",
    "Dakar, Senegal (Dakar)",
    "Kampala, Uganda (Kampala)",
    "Harare, Zimbabwe (Harare)",
    "Lusaka, Zambia (Lusaka)",
    "Maputo, Mozambique (Maputo)",
    "Antananarivo, Madagascar (Analamanga)",
    "Dar es Salaam, Tanzania (Dar es Salaam)",
    "Kigali, Rwanda (Kigali)",
    "Kinshasa, DR Congo (Kinshasa)",
    "Luanda, Angola (Luanda)",
    "Addis Ababa, Ethiopia (Addis Ababa)",
    "New Delhi, India (Delhi)",
    "Mumbai, India (Maharashtra)",
    "Bangalore, India (Karnataka)",
    "Chennai, India (Tamil Nadu)",
    "Hyderabad, India (Telangana)",
    "Kolkata, India (West Bengal)",
    "Ahmedabad, India (Gujarat)",
    "Pune, India (Maharashtra)",
    "Jaipur, India (Rajasthan)",
    "Karachi, Pakistan (Sindh)",
    "Lahore, Pakistan (Punjab)",
    "Islamabad, Pakistan (Islamabad Capital Territory)",
    "Dhaka, Bangladesh (Dhaka Division)",
    "Chittagong, Bangladesh (Chattogram Division)",
    "Colombo, Sri Lanka (Western Province)",
    "Kathmandu, Nepal (Bagmati)",
    "Thimphu, Bhutan (Thimphu)",
    "Beijing, China (Beijing Municipality)",
    "Shanghai, China (Shanghai Municipality)",
    "Guangzhou, China (Guangdong)",
    "Shenzhen, China (Guangdong)",
    "Chengdu, China (Sichuan)",
    "Hong Kong, China (Hong Kong SAR)",
    "Taipei, Taiwan (Taipei City)",
    "Kaohsiung, Taiwan (Kaohsiung City)",
    "Seoul, South Korea (Seoul)",
    "Busan, South Korea (Busan)",
    "Tokyo, Japan (Tokyo)",
    "Osaka, Japan (Osaka)",
    "Kyoto, Japan (Kyoto)",
    "Nagoya, Japan (Aichi)",
    "Yokohama, Japan (Kanagawa)",
    "Sapporo, Japan (Hokkaido)",
    "Fukuoka, Japan (Fukuoka)",
    "Manila, Philippines (Metro Manila)",
    "Cebu City, Philippines (Cebu)",
    "Jakarta, Indonesia (DKI Jakarta)",
    "Surabaya, Indonesia (East Java)",
    "Singapore, Singapore",
    "Kuala Lumpur, Malaysia (Federal Territory)",
    "George Town, Malaysia (Penang)",
    "Bangkok, Thailand (Bangkok)",
    "Chiang Mai, Thailand (Chiang Mai)",
    "Ho Chi Minh City, Vietnam (Ho Chi Minh)",
    "Hanoi, Vietnam (Hanoi)",
    "Phnom Penh, Cambodia (Phnom Penh)",
    "Vientiane, Laos (Vientiane)",
    "Yangon, Myanmar (Yangon)",
    "Mandalay, Myanmar (Mandalay)",
    "Canberra, Australia (Australian Capital Territory)",
    "Sydney, Australia (New South Wales)",
    "Melbourne, Australia (Victoria)",
    "Brisbane, Australia (Queensland)",
    "Perth, Australia (Western Australia)",
    "Adelaide, Australia (South Australia)",
    "Auckland, New Zealand (Auckland)",
    "Wellington, New Zealand (Wellington)",
    "Christchurch, New Zealand (Canterbury)",
    "Suva, Fiji (Central)",
    "Port Moresby, Papua New Guinea (National Capital District)",
    "Honolulu, USA (Hawaii)",
    "Anchorage, USA (Alaska)",
    "Nuuk, Greenland (Sermersooq)",
    "Phnom Penh, Cambodia (Phnom Penh)",
    "Vientiane, Laos (Vientiane)",
    "Yangon, Myanmar (Yangon)",
    "Mandalay, Myanmar (Mandalay)",
    "Canberra, Australia (Australian Capital Territory)",
    "Sydney, Australia (New South Wales)",
    "Melbourne, Australia (Victoria)",
    "Brisbane, Australia (Queensland)",
    "Perth, Australia (Western Australia)",
    "Adelaide, Australia (South Australia)",
    "Auckland, New Zealand (Auckland)",
    "Wellington, New Zealand (Wellington)",
    "Christchurch, New Zealand (Canterbury)",
    "Suva, Fiji (Central)",
    "Port Moresby, Papua New Guinea (National Capital District)",
    "Honolulu, USA (Hawaii)",
    "Anchorage, USA (Alaska)",
    "Nuuk, Greenland (Sermersooq)",
]

principles = [
    {"category": "Health & Fitness", "principle": "Your body is a reflection of your thoughts."},
    {"category": "Health & Fitness", "principle": "Cells respond to your dominant vibration."},
    {"category": "Health & Fitness", "principle": "Appreciate your body now."},
    {"category": "Health & Fitness", "principle": "Focus on vitality, not symptoms."},
    {"category": "Health & Fitness", "principle": "Well-being is your natural state."},
    {"category": "Health & Fitness", "principle": "Release resistance to healing."},
    {"category": "Health & Fitness", "principle": "Visualize your ideal health."},
    {"category": "Health & Fitness", "principle": "Food and exercise respond to expectation."},
    {"category": "Health & Fitness", "principle": "Joy accelerates healing."},
    {"category": "Health & Fitness", "principle": "Relax and allow energy to flow."},
    {"category": "Intellectual Life", "principle": "Curiosity attracts insight."},
    {"category": "Intellectual Life", "principle": "Alignment brings clarity."},
    {"category": "Intellectual Life", "principle": "Inspired thought feels light."},
    {"category": "Intellectual Life", "principle": "Let learning be joyful."},
    {"category": "Intellectual Life", "principle": "Questions summon answers."},
    {"category": "Intellectual Life", "principle": "Contrast sparks new ideas."},
    {"category": "Intellectual Life", "principle": "You can't get it wrong."},
    {"category": "Intellectual Life", "principle": "Follow thoughts that feel good."},
    {"category": "Intellectual Life", "principle": "Imagination is creative power."},
    {"category": "Intellectual Life", "principle": "Mental expansion is infinite."},
    {"category": "Emotional Life", "principle": "Your emotions are your guidance system."},
    {"category": "Emotional Life", "principle": "Reach for better-feeling thoughts."},
    {"category": "Emotional Life", "principle": "Relief is progress."},
    {"category": "Emotional Life", "principle": "Alignment is emotional stability."},
    {"category": "Emotional Life", "principle": "Appreciation raises your vibration."},
    {"category": "Emotional Life", "principle": "Negative emotion is temporary."},
    {"category": "Emotional Life", "principle": "Self-love is alignment."},
    {"category": "Emotional Life", "principle": "You are never \"off track.\""},
    {"category": "Emotional Life", "principle": "It's okay to feel."},
    {"category": "Emotional Life", "principle": "Celebrate emotional contrast—it clarifies desire."},
    {"category": "Character", "principle": "Integrity is alignment with your inner being."},
    {"category": "Character", "principle": "Your true self is always love."},
    {"category": "Character", "principle": "Authenticity attracts."},
    {"category": "Character", "principle": "Self-approval is your work."},
    {"category": "Character", "principle": "Live by your own guidance."},
    {"category": "Character", "principle": "Forgiveness releases resistance."},
    {"category": "Character", "principle": "Allow others to be who they are."},
    {"category": "Character", "principle": "Consistency comes from clarity."},
    {"category": "Character", "principle": "Trust your guidance."},
    {"category": "Character", "principle": "Kindness flows naturally when aligned."},
    {"category": "Spiritual Life", "principle": "You are Source in a physical body."},
    {"category": "Spiritual Life", "principle": "Connection is your natural state."},
    {"category": "Spiritual Life", "principle": "Well-being abounds."},
    {"category": "Spiritual Life", "principle": "All is well."},
    {"category": "Spiritual Life", "principle": "You can't be separated from Source."},
    {"category": "Spiritual Life", "principle": "Meditation aligns you."},
    {"category": "Spiritual Life", "principle": "You are eternally loved."},
    {"category": "Spiritual Life", "principle": "Guidance is always available."},
    {"category": "Spiritual Life", "principle": "The Universe responds instantly to vibration."},
    {"category": "Spiritual Life", "principle": "Spiritual growth is joyful expansion."},
    {"category": "Love Relationship", "principle": "Your partner is your mirror."},
    {"category": "Love Relationship", "principle": "Focus on what you love about them."},
    {"category": "Love Relationship", "principle": "You attract the relationship you expect."},
    {"category": "Love Relationship", "principle": "Don't try to change others—change your vibration."},
    {"category": "Love Relationship", "principle": "Appreciation transforms relationships."},
    {"category": "Love Relationship", "principle": "Be the lover you seek."},
    {"category": "Love Relationship", "principle": "Allow differences."},
    {"category": "Love Relationship", "principle": "All relationships are for joy and expansion."},
    {"category": "Love Relationship", "principle": "Mutual alignment is magical."},
    {"category": "Love Relationship", "principle": "Your relationship with yourself sets the tone."},
    {"category": "Parenting", "principle": "Children come as teachers."},
    {"category": "Parenting", "principle": "Guide by your example, not control."},
    {"category": "Parenting", "principle": "Appreciate their uniqueness."},
    {"category": "Parenting", "principle": "Their inner being guides them."},
    {"category": "Parenting", "principle": "Support their joy."},
    {"category": "Parenting", "principle": "Don't worry about \"mistakes.\""},
    {"category": "Parenting", "principle": "Trust their natural well-being."},
    {"category": "Parenting", "principle": "Focus on what's working."},
    {"category": "Parenting", "principle": "See their strengths."},
    {"category": "Parenting", "principle": "Connection > correction."},
    {"category": "Social Life", "principle": "You attract people by your vibration."},
    {"category": "Social Life", "principle": "Seek alignment, not approval."},
    {"category": "Social Life", "principle": "Appreciate differences."},
    {"category": "Social Life", "principle": "Relationships are for joy."},
    {"category": "Social Life", "principle": "Follow what feels fun."},
    {"category": "Social Life", "principle": "Connection starts within."},
    {"category": "Social Life", "principle": "Uplift others by your example."},
    {"category": "Social Life", "principle": "Allow others to be as they are."},
    {"category": "Social Life", "principle": "Laugh and play."},
    {"category": "Social Life", "principle": "Your tribe comes naturally when you're aligned."},
    {"category": "Financial Life", "principle": "Abundance is your birthright."},
    {"category": "Financial Life", "principle": "Money flows to appreciation."},
    {"category": "Financial Life", "principle": "Focus on abundance, not lack."},
    {"category": "Financial Life", "principle": "Allow yourself to receive."},
    {"category": "Financial Life", "principle": "Your beliefs create your financial reality."},
    {"category": "Financial Life", "principle": "Joyful spending increases flow."},
    {"category": "Financial Life", "principle": "Release resistance to wealth."},
    {"category": "Financial Life", "principle": "Value is an inside job."},
    {"category": "Financial Life", "principle": "Feel wealthy now."},
    {"category": "Financial Life", "principle": "Prosperity begins with mindset."},
    {"category": "Career", "principle": "You are meant to love your work."},
    {"category": "Career", "principle": "Inspired action trumps effort."},
    {"category": "Career", "principle": "Follow your passions."},
    {"category": "Career", "principle": "Your career is an extension of your joy."},
    {"category": "Career", "principle": "Focus on what excites you."},
    {"category": "Career", "principle": "Allow your path to unfold."},
    {"category": "Career", "principle": "Success is alignment."},
    {"category": "Career", "principle": "There are no limits to what you can create."},
    {"category": "Career", "principle": "Contrast brings clarity."},
    {"category": "Career", "principle": "Your value is inherent."},
    {"category": "Quality of Life", "principle": "Savor the moment."},
    {"category": "Quality of Life", "principle": "Life is supposed to be fun."},
    {"category": "Quality of Life", "principle": "You deserve beauty and comfort."},
    {"category": "Quality of Life", "principle": "Joy is productive."},
    {"category": "Quality of Life", "principle": "Well-being is natural."},
    {"category": "Quality of Life", "principle": "Small pleasures matter."},
    {"category": "Quality of Life", "principle": "Fill your life with what delights you."},
    {"category": "Quality of Life", "principle": "You’re not here to struggle."},
    {"category": "Quality of Life", "principle": "Ease is a sign of alignment."},
    {"category": "Quality of Life", "principle": "Enjoy the journey, not just the destination."},
    {"category": "Life Vision", "principle": "Dream as big as you can."},
    {"category": "Life Vision", "principle": "The Universe expands with your desire."},
    {"category": "Life Vision", "principle": "Vision clarifies vibration."},
    {"category": "Life Vision", "principle": "Focus on what you want, not what’s missing."},
    {"category": "Life Vision", "principle": "Imagination is powerful."},
    {"category": "Life Vision", "principle": "Your purpose is to feel good."},
    {"category": "Life Vision", "principle": "There are no limits."},
    {"category": "Life Vision", "principle": "Let the “how” unfold."},
    {"category": "Life Vision", "principle": "Alignment brings everything."},
    {"category": "Life Vision", "principle": "You are the creator of your reality."},
]


def get_random_item(array):
    random_index = int(random.random() * len(array))
    return array[random_index]

def generate_story(principle, occupation, city, age):
    
    prompt = f"""
        Write a short story that illustrates this Abraham-Hicks principle: {principle["principle"]} in the category of {principle["category"]}

        It should include 1-3 people around age {age} in {city}. 
        The people's ages should NOT be explicitly stated.
        One person has the occupation: {occupation}.
        Length: Between 300 and 400 words.
    """

    completion = client.chat.completions.create(
        model="o4-mini",
        messages=[
            {
                "role": "user",
                "content": prompt,
            },
        ],
    )

    return completion.choices[0].message.content

def generate_title(story):
    prompt = f"""
        Write a succinct title (under 10 words) for social media - not too clickbaity, but enough to capture attention - that would be intriguing to an Abraham-Hicks devotee, for the following story:
        {story}

        Include: Aspects of the story that would have universal appeal, but also be specific to the Abraham-Hicks community.
        DO NOT INCLUDE: Any names or city names unless they are common and universally known.
    """
    completion = client.chat.completions.create(
        model="o4-mini",
        messages=[
            {
                "role": "user",
                "content": prompt,
            },
        ],
    )
    return completion.choices[0].message.content

def generate_summary(story):

    prompt = f"""
        Write a short summary for social media that would be intriguing to an Abraham-Hicks devotee, for the following story.
        Length: Under 40 words
        Include: Aspects of the story that would have universal appeal, but also be specific to the Abraham-Hicks community.
        DO NOT INCLUDE: 
        - Any names or city names unless they are common and universally known.
        - Hashtags

        Story: {story}
    """

    completion = client.chat.completions.create(
        model="o4-mini",
        messages=[
            {
                "role": "user",
                "content": prompt,
            },
        ],
    )

    return completion.choices[0].message.content

def generate_image(story):
    response = client.images.generate(
		model="dall-e-3",
		prompt=f"""
            ### INSTRUCTION (critical – obey exactly)
            Create a single 1024×1024 image.  
            The final image must contain **zero** letters, numbers, symbols, words, logos, signatures, signage, speech bubbles, or text‑like marks of any kind.

            ### ART STYLE
            - Cinematic composition and storytelling in a single frame.
            - Beautiful artwork by a modern artist from the region mentioned in the story below. 

            ### CRITICAL – FACE QUALITY
            Render all faces with natural, realistic proportions, clear symmetrical features, and gentle, authentic smiles. No distortions, no extra facial elements, no text.


            ### SUBJECT
            An art piece depicting the following story: {story}
		""",
		size="1024x1024",
		quality="standard",
		n=1,
	)

    return response.data[0].url

def create_next_folder():
    # Get all folders in current directory
    folders = [f for f in os.listdir('.') if os.path.isdir(f)]
    
    # Filter for numerical folders and get their numbers
    numbers = []
    for folder in folders:
        try:
            num = int(folder)
            numbers.append(num)
        except ValueError:
            continue
    
    # Get next number (1 if no numerical folders exist)
    next_num = 1 if not numbers else max(numbers) + 1
    
    # Create new folder
    os.makedirs(str(next_num))
    
    return next_num

def create_content_json(story_num, title, summary, principle, story, hashtags):
    # Create content dictionary
    content = {
        "title": title,
        "summary": summary,
        "principle": principle["principle"],
        "category": principle["category"],
        "story": story,
        "hashtags": hashtags
    }
    
    # Write to JSON file
    with open(f"{story_num}/content.json", "w") as f:
        json.dump(content, f, indent=4)
        
    print(f"Created content.json in folder {story_num}")

def save_image(image_url, story_num):
    image_response = requests.get(image_url)
    if image_response.status_code == 200:
        image_path = Path(str(story_num)) / "cover.png"
        with open(image_path, 'wb') as image_file:
            image_file.write(image_response.content)
    else:
        print("Failed to download the image.")

def get_hashtags(principle):
    # Base hashtags that are always included
    base_hashtags = "#AbrahamHicks #LawOfAttraction #IllustratedAbe"
    
    # Dictionary mapping categories to their hashtags
    category_hashtags = {
        "Health & Fitness": "#VitalityIsMyVibration #WellBeingIsNatural #MindBodyAlignment",
        "Intellectual Life": "#CuriosityIsAlignment #InspiredThoughtsOnly #LearningThroughJoy",
        "Emotional Life": "#EmotionalGuidanceSystem #ReliefIsProgress #FeelGoodFirst",
        "Character": "#IntegrityIsAlignment #BeYourInnerBeing #LiveByInnerGuidance",
        "Spiritual Life": "#SourceEnergyFlowing #AlignmentIsEverything #SpiritualAlignment",
        "Love Relationship": "#VibrationalMatch #LoveIsMyFrequency #AlignedConnection",
        "Parenting": "#ConnectedNotCorrective #ChildrenAreGuided #ParentFromAlignment",
        "Social Life": "#MagneticVibesOnly #AuthenticityAttracts #ConnectionFromAlignment",
        "Financial Life": "#AbundanceIsNatural #MoneyIsEnergy #AllowFinancialFlow",
        "Career": "#InspiredActionOnly #WorkThatFeelsGood #CareerFromAlignment",
        "Quality of Life": "#LifeIsSupposedToBeFun #EaseAndJoyFlow #GoodFeelingLiving",
        "Life Vision": "#DeliberateCreation #LiveTheVisionNow #ActAsIfItIs"
    }
    
    # Get category-specific hashtags
    category = principle["category"]
    category_specific_hashtags = category_hashtags.get(category, "")
    
    # Combine base hashtags with category-specific hashtags in random order
    all_hashtags = f"{base_hashtags} {category_specific_hashtags}".split()
    random.shuffle(all_hashtags)
    return " ".join(all_hashtags)

def create_images_json(path, num_slides):
    base_url = "https://raw.githubusercontent.com/happinessEngineer/illustrated-abe/main"
    images = [f"{base_url}/{path}/cover-with-text.jpg"]
    
    for i in range(1, num_slides + 1):
        padded_num = str(i).zfill(3)
        images.append(f"{base_url}/{path}/slide_{padded_num}.jpg")
    
    with open(f"{path}/images.json", "w") as f:
        json.dump(images, f, indent=4)
    
    print(f"Created images.json in folder {path}")


def run():
    random_occupation = get_random_item(occupations)
    random_city = get_random_item(cities)
    random_principle = get_random_item(principles)
    random_age = random.randint(15, 70)

    print(random_principle["principle"])
    print(random_principle["category"])
    print(random_occupation)
    print(random_city)
    print(random_age)

    story = generate_story(random_principle, random_occupation, random_city, random_age)
    title = generate_title(story)
    summary = generate_summary(story)
    hashtags = get_hashtags(random_principle)

    print(title)
    print(summary)
    print(story)
    
    image_url = generate_image(story)
    if (image_url):
        story_num = create_next_folder()
        save_image(image_url, story_num)
        story_dir = str(story_num)

        image_path = Path(story_dir) / "cover.png"
        output_path = Path(story_dir) / "cover-with-text.jpg"

        create_cover_image(
            image_path=image_path,
            output_path=output_path,
            text=title
        )
        num_slides = create_slide_images(story, story_dir)
        print(num_slides)
    else:
        print("Failed to generate image URL")
        exit()
        
    create_content_json(story_num, title, summary, random_principle, story, hashtags)
    create_images_json(story_dir, num_slides)


num_runs = int(os.getenv('NUM_RUNS', '1'))
for _ in range(num_runs):
    run()
